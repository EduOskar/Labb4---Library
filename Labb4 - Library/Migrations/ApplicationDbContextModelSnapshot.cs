// <auto-generated />
using System;
using Labb4___Library.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Labb4___Library.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    partial class ApplicationDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.5")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Labb4___Library.Models.BookItems", b =>
                {
                    b.Property<int>("BookId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("BookId"));

                    b.Property<string>("Author")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("BookId");

                    b.ToTable("BookItems");

                    b.HasData(
                        new
                        {
                            BookId = 1,
                            Author = "George RR Martin",
                            Description = "Fantasybook about ice and fire",
                            Quantity = 4,
                            Title = "Song of ice and fire"
                        },
                        new
                        {
                            BookId = 2,
                            Author = "Tolkien",
                            Description = "Fantasybook about Gandalf mostly",
                            Quantity = 3,
                            Title = "Lord of the rings"
                        },
                        new
                        {
                            BookId = 3,
                            Author = "Tolkien",
                            Description = "Fantasybook about Gandalf mostly",
                            Quantity = 3,
                            Title = "Story of the two towers"
                        },
                        new
                        {
                            BookId = 4,
                            Author = "Tolkien",
                            Description = "Fantasybook about Gandalf mostly",
                            Quantity = 3,
                            Title = "Return of the king"
                        },
                        new
                        {
                            BookId = 5,
                            Author = "John Grogan",
                            Description = "My life with the craziest dog ever as a companion",
                            Quantity = 2,
                            Title = "Marley and Me"
                        },
                        new
                        {
                            BookId = 6,
                            Author = "Sebastian Marroquin",
                            Description = "Pablo Escobars life and death",
                            Quantity = 1,
                            Title = "Pablo Escobar Memoirs"
                        });
                });

            modelBuilder.Entity("Labb4___Library.Models.BookLoans", b =>
                {
                    b.Property<int?>("BookLoanId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int?>("BookLoanId"));

                    b.Property<int?>("FKCustomerId")
                        .HasColumnType("int");

                    b.Property<int?>("FkBookId")
                        .HasColumnType("int");

                    b.Property<bool>("IsLoaned")
                        .HasColumnType("bit");

                    b.Property<DateTime>("IsReturned")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("Loaned")
                        .HasColumnType("datetime2");

                    b.HasKey("BookLoanId");

                    b.HasIndex("FKCustomerId");

                    b.HasIndex("FkBookId");

                    b.ToTable("BookLoans");
                });

            modelBuilder.Entity("Labb4___Library.Models.Customers", b =>
                {
                    b.Property<int>("CustomerId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CustomerId"));

                    b.Property<string>("CustomerFirstName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("CustomersLastName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<string>("ImgURL")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasMaxLength(11)
                        .HasColumnType("nvarchar(11)");

                    b.HasKey("CustomerId");

                    b.ToTable("Customers");

                    b.HasData(
                        new
                        {
                            CustomerId = 1,
                            CustomerFirstName = "Oskar",
                            CustomersLastName = "Åhling",
                            Email = "Oskar@Mail.com",
                            ImgURL = "",
                            PhoneNumber = "070-2138149"
                        },
                        new
                        {
                            CustomerId = 2,
                            CustomerFirstName = "Ina",
                            CustomersLastName = "Nilsson",
                            Email = "Ina@Mail.com",
                            ImgURL = "",
                            PhoneNumber = "070-2138150"
                        },
                        new
                        {
                            CustomerId = 3,
                            CustomerFirstName = "Bamse",
                            CustomersLastName = "Bomsisson",
                            Email = "Bomse@Mail.com",
                            ImgURL = "",
                            PhoneNumber = "070-0909090"
                        });
                });

            modelBuilder.Entity("Labb4___Library.Models.BookLoans", b =>
                {
                    b.HasOne("Labb4___Library.Models.Customers", "Customers")
                        .WithMany()
                        .HasForeignKey("FKCustomerId");

                    b.HasOne("Labb4___Library.Models.BookItems", "Books")
                        .WithMany()
                        .HasForeignKey("FkBookId");

                    b.Navigation("Books");

                    b.Navigation("Customers");
                });
#pragma warning restore 612, 618
        }
    }
}
